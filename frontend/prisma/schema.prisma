// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  username  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects Project[]

  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]
  envs          Env[]
  settings      Settings?
  logs          Log[]

  @@index([username])
  @@map("users")
}

model Env {
  id          String   @id @default(uuid())
  name        String
  value       String
  generatedId String
  secret      Boolean  @default(false)
  createdAt   DateTime @default(now())
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?

  @@map("envs")
}

model Project {
  id          String       @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  nodes       Node[]
  edges       Edge[]
  data        Json[]
  logs        Log[]
  customNodes CustomNode[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
  @@map("projects")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Log {
  id        String   @id @default(cuid())
  type      LogType
  level     LogLevel
  message   String
  metadata  Json?
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@index([type])
  @@index([level])
  @@index([createdAt])
  @@index([projectId])
  @@index([userId])
}

model Settings {
  id                 String   @id @default(cuid())
  user               User     @relation(fields: [userId], references: [id])
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  avatar             String?
  timezone           String   @default("Asia/Kolkata")
  language           String   @default("en")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model CustomNode {
  id          String   @id @default(cuid())
  name        String
  description String?
  code        String // The actual node component code
  config      Json // Additional configuration (inputs, outputs, etc.)
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String // userId who created this custom node
  isPublic    Boolean  @default(false) // Whether this node can be used by other projects
  version     Int      @default(1) // For versioning custom nodes
  metadata    Json? // Additional metadata like tags, category, etc.
  Node        Node[]

  @@index([projectId])
  @@index([createdBy])
}

model Node {
  id           String      @id @default(cuid())
  type         String // Can be built-in types or custom node IDs
  position     Json // { x: number, y: number }
  data         Json // Node data including custom node specific data
  projectId    String
  project      Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sourceEdges  Edge[]      @relation("SourceNode")
  targetEdges  Edge[]      @relation("TargetNode")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  customNodeId String? // Reference to CustomNode if this is a custom node instance
  customNode   CustomNode? @relation(fields: [customNodeId], references: [id])

  @@index([projectId])
  @@index([customNodeId])
}

model Edge {
  id         String   @id @default(cuid())
  source     String
  target     String
  sourceNode Node     @relation("SourceNode", fields: [source], references: [id])
  targetNode Node     @relation("TargetNode", fields: [target], references: [id])
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  data       Json? // Edge data like labels, styles, etc.
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([projectId])
  @@index([source])
  @@index([target])
}

enum LogType {
  WORKFLOW_CREATED
  WORKFLOW_UPDATED
  WORKFLOW_DELETED
  NODE_ADDED
  NODE_REMOVED
  NODE_UPDATED
  EDGE_ADDED
  EDGE_REMOVED
  EDGE_UPDATED
  EXECUTION_STARTED
  EXECUTION_COMPLETED
  EXECUTION_FAILED
  SETTINGS_UPDATED
  PROJECT_CREATED
  PROJECT_DELETED
  PROJECT_UPDATED
}

enum LogLevel {
  INFO
  WARNING
  ERROR
  DEBUG
}
